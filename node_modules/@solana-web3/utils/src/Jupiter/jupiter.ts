import { Keypair, VersionedTransaction } from "@solana/web3.js";

const endpoint = "https://quote-api.jup.ag/v6";

export const getSwapQuoteByJupiter = async (inputMint: string, outputMint: string, amount: number, swapMode: "ExactIn" | "ExactOut" = "ExactIn", slippageBps: number = 500, dexes?: string[]) => {
    try {
        let url = `${endpoint}/quote?inputMint=${inputMint}&outputMint=${outputMint}&amount=${amount}&slippageBps=${slippageBps}&swapMode=${swapMode}`;
        if (dexes) {
            url = url + `&dexes=${dexes}`;
        }
        const quoteResponse = await (
            await fetch(url)
        ).json();
        // console.log('quoteResponse: ', quoteResponse);
        return quoteResponse;
    } catch (error) {
        console.log('getSwapQuoteByJupiter Error: ', error);
        return null;
    }
}

export const makeSwapTxByJupiter = async (quoteResponse: any, payer: Keypair) => {
    try {
        const { swapTransaction } = await (
            await fetch(`${endpoint}/swap`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    quoteResponse,
                    userPublicKey: payer.publicKey.toBase58(),
                    wrapAndUnwrapSol: true,
                    // prioritizationFeeLamports: 10000000
                })
            })
        ).json();

        // console.log('swapTransaction: ', swapTransaction);
        if (swapTransaction == undefined || swapTransaction == null)
            return null;
        // deserialize the transaction
        const swapTransactionBuf = Buffer.from(swapTransaction, 'base64');
        const transaction = VersionedTransaction.deserialize(swapTransactionBuf);
        return transaction;
    } catch (error) {
        console.log('getJupiterSwapTransaction Error: ', error);
        return null;
    }
}