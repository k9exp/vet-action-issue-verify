import bs58 from 'bs58';

import {
    Connection,
    PublicKey,
    Keypair,
    LAMPORTS_PER_SOL,
    TransactionMessage,
    TransactionInstruction,
    BlockhashWithExpiryBlockHeight,
    VersionedTransaction,
    Transaction
} from '@solana/web3.js';

export const getSolBalance = async (connection: Connection, publicKey: PublicKey, lamports: boolean = false) => {
    try {
        const balance = await connection.getBalance(publicKey);
        if (lamports)
            return balance;
        else
            return balance / LAMPORTS_PER_SOL;
    } catch (error) {
        console.log('getSolBalance Error :', error);
        return 0;
    }
}

export const getKeyPairFromPrivateKey = (privateKey: string) => {
    try {
        return Keypair.fromSecretKey(bs58.decode(privateKey));
    } catch (error) {
        console.log('getKeyPairFromPrivateKey Error: ', error);
        return null;
    }
}

export const makeVersionedTxFromIxs = (instructions: TransactionInstruction[], payer: Keypair, signers: Keypair[], latestBlockHash: BlockhashWithExpiryBlockHeight) => {
    const message = new TransactionMessage({
        payerKey: payer.publicKey,
        recentBlockhash: latestBlockHash.blockhash,
        instructions: instructions
    }).compileToV0Message();
    const versionedTx = new VersionedTransaction(message);
    versionedTx.sign(signers);
    return versionedTx;
}

export const makeVersionedTxFromTx = (transaction: Transaction, payer: Keypair, latestBlockHash: BlockhashWithExpiryBlockHeight) => {
    const message = new TransactionMessage({
        payerKey: payer.publicKey,
        recentBlockhash: latestBlockHash.blockhash,
        instructions: transaction.instructions
    }).compileToV0Message();
    const versionedTx = new VersionedTransaction(message);
    versionedTx.sign([payer]);
    return versionedTx;
}