import {
    Connection,
    Keypair,
    PublicKey,
    Transaction,
    TransactionMessage,
    VersionedTransaction
} from "@solana/web3.js";
import {
    Raydium,
    CurveCalculator,
    TxVersion,
    ApiV3PoolInfoStandardItemCpmm,
    CpmmKeys,
    CpmmRpcData,
    CREATE_CPMM_POOL_PROGRAM,
    DEV_CREATE_CPMM_POOL_PROGRAM
} from "@raydium-io/raydium-sdk-v2"
import { BN } from "@coral-xyz/anchor";

let raydium: Raydium;

export const initSdk = async (connection: Connection, owner: Keypair) => {
    raydium = await Raydium.load({ connection: connection, owner: owner.publicKey });
}

export const getSwapInstructions = async (inputMint: string, inputamount: bigint, poolId: string, slippage: number) => {

    let poolInfo: ApiV3PoolInfoStandardItemCpmm;
    let poolKeys: CpmmKeys | undefined
    let rpcData: CpmmRpcData

    const data = await raydium.cpmm.getPoolInfoFromRpc(poolId);
    poolInfo = data.poolInfo;
    poolKeys = data.poolKeys;
    rpcData = data.rpcData;

    console.log('poolInfo: ', poolInfo);
    console.log('poolKeys: ', poolKeys);
    console.log('rpcData: ', rpcData);

    if (!isValidCpmm(poolInfo.programId)) {
        console.log('target pool is not CPMM pool');
        return null;
    };

    if (inputMint !== poolInfo.mintA.address && inputMint !== poolInfo.mintB.address) {
        console.log('input token does not match pool');
        return null;
    }

    console.log('rpcData: ', rpcData);

    const baseIn = inputMint === poolInfo.mintA.address;

    const inputAmount = new BN(inputamount);

    const swapResult = CurveCalculator.swap(
        inputAmount,
        baseIn ? rpcData.baseReserve : rpcData.quoteReserve,
        baseIn ? rpcData.quoteReserve : rpcData.baseReserve,
        rpcData.configInfo!.tradeFeeRate
    );

    console.log('swapResult: ', swapResult);

    const { transaction } = await raydium.cpmm.swap<TxVersion.LEGACY>({
        poolInfo,
        poolKeys,
        swapResult,
        baseIn,
        slippage: slippage / 100, // range: 1 ~ 0.0001, means 100% ~ 0.01%
        txVersion: TxVersion.LEGACY,
        inputAmount,
    });

    console.log('instructions: ', transaction.instructions);

    return transaction.instructions;
}

const VALID_PROGRAM_ID = new Set([CREATE_CPMM_POOL_PROGRAM.toBase58(), DEV_CREATE_CPMM_POOL_PROGRAM.toBase58()])
const isValidCpmm = (id: string) => VALID_PROGRAM_ID.has(id);